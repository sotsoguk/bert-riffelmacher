<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hello Friend</title>
    <link>/post/</link>
    <description>Recent content in Posts on Hello Friend</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Jun 2019 12:47:09 +0200</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Van Eck Sequence</title>
      <link>/post/van-eck-sequence/</link>
      <pubDate>Thu, 13 Jun 2019 12:47:09 +0200</pubDate>
      
      <guid>/post/van-eck-sequence/</guid>
      <description>Van-Eck Sequence Recently, i came across a numberphile video about an interesting series, the Van-Eck-Series.~~~~</description>
    </item>
    
    <item>
      <title>AdventOfCode Day 4</title>
      <link>/post/20181204-aoc04/</link>
      <pubDate>Wed, 05 Dec 2018 01:40:17 +0100</pubDate>
      
      <guid>/post/20181204-aoc04/</guid>
      <description>Today i post only the solution to Day 4. Not nice nor efficient, had one nasty bug so the solution to part 1 as correct, but not the second part. But after four days, i&amp;rsquo;m still on track. The only highlight of today is the usage of a shortcode to include the code file into this post.
Update: This code is really ugly ;).
import re import numpy as np import operator with open(&#39;input.</description>
    </item>
    
    <item>
      <title>AdventofCode Day 3: No Matter How You Slice It</title>
      <link>/post/aoc2018-day03/</link>
      <pubDate>Tue, 04 Dec 2018 01:30:19 +0100</pubDate>
      
      <guid>/post/aoc2018-day03/</guid>
      <description>Part 1 The main problem for me of the first part of Day 3 was processing the input, which contains the id, coordinates and dimensions of each rectangle:
... #1332 @ 556,501: 15x18 #1333 @ 61,800: 23x29 #1334 @ 3,578: 15x23 ...  My first working, but kind of ugly, solution looked like this:
for line in lines: tmp = line.split() idd = int(tmp[0].strip(&#39;#&#39;)) x,y = map(int,(tmp[2].strip(&amp;quot;:&amp;quot;).split(&amp;quot;,&amp;quot;))) xr,yr = map(int,tmp[3].</description>
    </item>
    
    <item>
      <title>AdventOfCode - Day 1</title>
      <link>/post/adventofcode-day01/</link>
      <pubDate>Sun, 02 Dec 2018 01:08:19 +0100</pubDate>
      
      <guid>/post/adventofcode-day01/</guid>
      <description>I&amp;rsquo;m trying to get back to coding and problem solving at the moment and came across Advent Of Code, which seems to be a very good project to help me get started and keep me motivated. I will try to solve the problems using python, and maybe c++ or any other language if i have the time.
Day 1: Chronal Calibration Part 1 The first part of the first problem was a very good starter for me.</description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>/post/hello-hugo/</link>
      <pubDate>Sat, 24 Nov 2018 00:35:06 +0100</pubDate>
      
      <guid>/post/hello-hugo/</guid>
      <description>Hello World,
how are you.
Why so sad??  </description>
    </item>
    
  </channel>
</rss>